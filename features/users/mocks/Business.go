// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "prog/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Business is an autogenerated mock type for the Business type
type Business struct {
	mock.Mock
}

// DeleteUserById provides a mock function with given fields: userId
func (_m *Business) DeleteUserById(userId int) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *Business) GetAllUsers() ([]users.Core, error) {
	ret := _m.Called()

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *Business) GetUserById(id int) (users.Core, error) {
	ret := _m.Called(id)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(int) users.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: data
func (_m *Business) RegisterUser(data users.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(users.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserById provides a mock function with given fields: userId, data
func (_m *Business) UpdateUserById(userId int, data users.Core) error {
	ret := _m.Called(userId, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, users.Core) error); ok {
		r0 = rf(userId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

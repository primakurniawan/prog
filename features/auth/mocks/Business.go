// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	auth "prog/features/auth"
	users "prog/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Business is an autogenerated mock type for the Business type
type Business struct {
	mock.Mock
}

// AddRefreshToken provides a mock function with given fields: data
func (_m *Business) AddRefreshToken(data auth.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: data
func (_m *Business) DeleteRefreshToken(data auth.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyRefreshToken provides a mock function with given fields: data
func (_m *Business) VerifyRefreshToken(data auth.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUserCredential provides a mock function with given fields: data
func (_m *Business) VerifyUserCredential(data users.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(users.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
